<?xml version="1.0" encoding="utf-8"?>
<CheatTable>
  <CheatEntries>
    <CheatEntry>
      <ID>257223</ID>
      <Description>"Enable"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">{ Game   : Brotato.exe
  Version: 
  Date   : 2022-09-30
  Author : cfe

  This script does blah blah blah
}


[ENABLE]

alloc(GetClassName,$1000,$process)
registersymbol(GetClassName)

GetClassName:
push rbx
sub rsp,40
mov rax,[rcx]
call qword ptr[rax+30] // object::_get_class_namev
add rsp,40
pop rbx
ret


aobscanmodule(aobViewport,Brotato.exe,4D 8B 16 48 8D 44 24 38 48 89 44 24 28 4C 8D 4C 24 50 4C 8B C5 89 7C 24 20 48 8B D6 49 8B CE 41 FF 52 60) // should be unique
alloc(newmem,$1000,aobViewport)

label(code)
label(return)
label(pViewport)
registersymbol(pViewport)
newmem:

code:
mov [pViewport],r14
  mov r10,[r14]
  lea rax,[rsp+38]
  jmp return
pViewport:
dq 0

aobViewport:
  jmp newmem
  nop 3
return:
registersymbol(aobViewport)

[DISABLE]


dealloc(GetClassName)

unregistersymbol(*)


aobViewport:
  db 4D 8B 16 48 8D 44 24 38

unregistersymbol(aobViewport)
dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>257224</ID>
          <Description>"Lua"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>FF8000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end

function FindDictValue(Item,Name)
 local NameStr = readPointer(Item)
 local szName = readPointer(NameStr+0x8)
 szName = readString(szName,99,true)
 if szName == Name then return Item+0x10 end
 local NextItem = readPointer(Item+0x20)
 if NextItem == 0 then return 0 end
 local Ret = FindDictValue(NextItem,Name)
 return Ret
end

function GetPointer(Node,Name)
 local ScriptInstance = readPointer(Node+CONST_SCRIPTINSTANCE)
 local Script = readPointer(ScriptInstance+0x10)

 local VectorVariant = readPointer(ScriptInstance+0x20)
 local Size = readInteger(VectorVariant-0x4)

   for i=0,(Size-1) do
    local membermap = readPointer(Script+CONST_MEMBERINDICES)
    local endmap = readPointer(Script+CONST_MEMBERINDICES+0x8)
    local VarName = "null"

    membermap = readPointer(membermap+0x10)
    if (readPointer(membermap+0x10) == endmap) then
     VarName = ReadName(membermap,i)
    else
     while (readPointer(membermap+0x10) ~= endmap) do
       membermap = readPointer(membermap+0x10)
     end
     VarName = ReadName(membermap,i)
    end

    if VarName == Name then
     return VectorVariant + ( 0x18 * (i)) + 8
    end

    end

    return 0
end


function FindScript(name,func,byte)

local Player = FindNodeWithScriptInstance(VIEWPORT,name)
if Player == 0 then return 99 end

local Script = readPointer(Player+0x60)

local membermap = readPointer(Script+0x1A8)
local endmap = readPointer(Script+0x1A8+8)
local size = readInteger(Script+0x1A8+0x10)
local ret = 0

membermap = readPointer(membermap+0x10)

  if (readPointer(membermap+0x10) == endmap) then
     ret = OverrideScript(membermap,func,size,byte)
  else
   while (readPointer(membermap+0x10) ~= endmap) do
     membermap = readPointer(membermap+0x10)
    end
     ret = OverrideScript(membermap,func,size,byte)
  end

  return ret
end

function OverrideScript(map,str,size,byte)
 for i=0,(size-1) do
  local bWide = true
  local name = readPointer(map+0x30)
  local s = readPointer(name+8)
  if s &gt; 0 then bWide = false else s = readPointer(name+0x10) end
  s = readString(s,99,bWide)
  if s == str then
   local func = readPointer(map+0x38)
   local script = readPointer(func+0x50)
   --printf("%x",script)
   writeBytes(script,byte)
   return 1
  end
  if readPointer(map+0x20) &gt; 0 then map=readPointer(map+0x20) end
 end
 return 0
end

function ReadNameString(ptr)
 local Name = readPointer(ptr)
 Name = readPointer(Name+0x10)
 return readString(Name,99,true)
end

function MemRec(Name,Ptr,CEType,Owner)
 local newRec = addList.createMemoryRecord()
 newRec.setDescription(Name)
 newRec.setAddress(Ptr)
 newRec.setType(CEType)
 newRec.DontSave=true
 newRec.appendToEntry(Owner)
end

function GetCEType(gType)
 if (gType == 1) then return 0 end --bool
 if (gType == 3) then return 5 end --a float is a double in godot
 if (gType == 5) then return 4 end --vector2 is a x,y float in godot
 if (gType == 4) then return 7 end --(unicode)string
 if (gType == 18) then return 3 end --node pointer
 return 2 --integer
end

--GDScript
function ReadName(member,index)
if index == readInteger(member+0x38) then
  local _NameString = readPointer(member+0x30)
  local NameString = readPointer(_NameString+0x10)
  local bWide = true
  if NameString == 0 then
   NameString = readPointer(_NameString+0x8)
   bWide = false
  end
  local str = readString(NameString,99,bWide)
  return str
end
local NextMap = readPointer(member+0x20)
if NextMap == 0 then return "null" end
local retstr = ReadName(NextMap,index)
return retstr
end

--Visual Script
function ReadNameVariant(member,mi)
  local NameString = readPointer(member+0x30)
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  local Info = {}
  Info.Name = szName
  Info.Type = readInteger(member+0x38)
  Info.Ptr = member+0x40
  table.insert(mi,Info)
  local NextMap = readPointer(member+0x20)
  if NextMap == 0 then return MemberInfo end
  ReadNameVariant(NextMap,mi)
end

function Transform(Node,NameRec)
 local Class = executeCodeEx(0,nil, getAddress("GetClassName"),Node)
 if Class == 0 or nil then return end

 Class = ReadNameString(Class)
 if Class == "Sprite" then
   local SpriteTransform = Node + 0x288
   MemRec("Transform X",SpriteTransform,4,NameRec)
   MemRec("Transform Y",SpriteTransform+0x4,4,NameRec)
   MemRec("Transform Rotation(Radiants)",SpriteTransform+0x8,4,NameRec)
   MemRec("Transform Scale X",SpriteTransform+0xC,4,NameRec)
   MemRec("Transform Scale Y",SpriteTransform+0x10,4,NameRec)
 end
 if (Class == "Kinematic2D") then
  ---....
 end
end

function FindNode(vp,str)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local NameString = readPointer(Node+CONST_NAMESTRING)
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  if szName == str then return Node end
  local ret = FindNode(Node,str)
  if ret &gt; 0 then return ret end
 end

 return 0
end

function FindNodeWithScriptInstance(vp,str)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)
 if Size == 0 or Size == nil then return 0 end

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  if Node == 0 then return 0 end
  local NameString = readPointer(Node+CONST_NAMESTRING)
  if NameString == 0 or NameString == nil then return 0 end
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  if szName == str and readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 then return Node end
  local ret = FindNodeWithScriptInstance(Node,str)
  if ret &gt; 0 and readQword(ret+CONST_SCRIPTINSTANCE) &gt; 0 then return ret end
 end

 return 0
end

function FindNodesWithScript(vp,str,array)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local NameString = readPointer(Node+CONST_NAMESTRING)
  if NameString == 0 then return 0 end
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  if szName ~= nil and string.match(szName,str) and readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 then
   table.insert(array,Node)
  end
  FindNodesWithScript(Node,str,array)
 end

  return array
end

function FindNodeByScriptType(vp,stype)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  if Node == 0 then return 0 end
  local Script = readPointer(Node+0x68)
  if Script &gt; 0 and Script ~= nil then
   local ResourcePtr = readPointer(Script+CONST_SCRIPT)
   if ResourcePtr &gt; 0 and ResourcePtr ~= nil then
    local name = readString(ResourcePtr,99,true)
    if string.match(name,stype) then return Node end
   end
  end
  local ret = FindNodeByScriptType(Node,stype)
  if ret &gt; 0 then return ret end
 end

 return 0

end

function FindNodesByScriptType(vp,str,array)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local Script = readPointer(Node+0x68)
  if Script then
    local NameString = readPointer(Script+CONST_SCRIPT)
    local szName = readString(NameString,99,true)
    if szName ~= nil and string.match(szName,str) and readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 then
     table.insert(array,Node)
    end
  end
  FindNodesByScriptType(Node,str,array)
 end
  return array
end

function DebugDumpNodes(vp,bscript)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local NameString = readPointer(Node+CONST_NAMESTRING)
  local Offset = readPointer(NameString+0x08)
  if Offset == 0 then Offset = readPointer(NameString+0x10) end

  local szName = readString(Offset,99,true)


  if not bscript then
   print(string.format("%s : %X",szName,Node))
  else
   local Script = readPointer(Node+0x60)
   local ScriptName = "nil"
   if Script &gt; 0 and Script ~= nil then
   local Script = readPointer(Script+CONST_SCRIPT)
   if Script &gt; 0 and Script ~= nil then ScriptName = readString(Script,99,true) end
   end
   if (readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 ) then print(string.format("%s : %X (%s)",szName,Node,ScriptName)) end
  end
  DebugDumpNodes(Node,bscript)
 end

 return 0
end

function GenerateClassMember(szName)
  addList = getAddressList()
  StringSearch = szName--inputQuery( '', 'Node Name:', '' )

  local vp = getAddress("pViewport")
  vp = readPointer(vp)

  if vp == 0 then print("no viewport") error("") end

  local Node = FindNodeWithScriptInstance(vp,StringSearch)
  if Node == 0 then print("node not found") error("") end
  local ScriptInstance = readPointer(Node+CONST_SCRIPTINSTANCE)
  local Script = readPointer(ScriptInstance+0x10)

  local ScriptType = executeCodeEx(0,nil,getAddress("GetClassName"),Script)
  if ScriptType == 0 or nil then return end

  local szScriptType = ReadNameString(ScriptType)

  local NodeName = readPointer(Node+CONST_NAMESTRING)
  NodeName = readPointer(NodeName+0x10)
  local szNodeName = readString(NodeName,99,true)

  local ParentRec = addList.createMemoryRecord()
  ParentRec.setDescription("Generated:")
  ParentRec.setAddress(0)
  ParentRec.setType(8)
  ParentRec.DontSave=true

  local NameRec = addList.createMemoryRecord()
  NameRec.setDescription(szNodeName)
  NameRec.setAddress(0)
  NameRec.setType(8)
  NameRec.DontSave=true
  NameRec.appendToEntry(ParentRec)

  if (szScriptType == "GDScript") then
   local VectorVariant = readPointer(ScriptInstance+0x20)
   local Size = readInteger(VectorVariant-0x4)

   Transform(Node,NameRec)

   for i=0,(Size-1) do
    local membermap = readPointer(Script+CONST_MEMBERINDICES)
    local endmap = readPointer(Script+CONST_MEMBERINDICES+0x8)
    local VarName = "null"

    membermap = readPointer(membermap+0x10)
    if (readPointer(membermap+0x10) == endmap) then
     VarName = ReadName(membermap,i)
    else
     while (readPointer(membermap+0x10) ~= endmap) do
       membermap = readPointer(membermap+0x10)
     end
     VarName = ReadName(membermap,i)
    end

    local Type = readInteger(VectorVariant)
    local CEType = GetCEType(Type)

    local Ptr = VectorVariant+0x8

    if (Type == 4 ) then -- if string
     Ptr=readPointer(Ptr) --read ptr to wchars
    end

    if (Type == 5) then -- if vector2
     MemRec(string.format("[%x] %s Vec2.x", i,VarName),Ptr,CEType,NameRec)
     MemRec(string.format("[%x] %s Vec2.y", i,VarName),Ptr+0x4,CEType,NameRec)
    else
     MemRec(string.format("[%x] %s", i,VarName),Ptr,CEType,NameRec)
    end

    VectorVariant=VectorVariant+0x18
   end

   return

end
--end of "GDSript"

if (szScriptType == "VisualScript") then

  Transform(Node,NameRec)

  local membermap = readPointer(ScriptInstance+0x18)
  local endmap = readPointer(ScriptInstance+0x20)
  local MemberInfos = {}

  membermap = readPointer(membermap+0x10)
  if (readPointer(membermap+0x10) == endmap) then
   ReadNameVariant(membermap,MemberInfos)
  else
   while (readPointer(membermap+0x10) ~= endmap) do
     membermap = readPointer(membermap+0x10)
   end
   ReadNameVariant(membermap,MemberInfos)
  end

   for i,v in pairs(MemberInfos) do
      local CEType = GetCEType(v.Type)
      MemRec(string.format("[%x] %s", i,v.Name),v.Ptr,CEType,NameRec)
    end

end

end


function FindVariables(szName,t,stype)
  addList = getAddressList()
  StringSearch = szName--inputQuery( '', 'Node Name:', '' )

  local vp = getAddress("pViewport")
  vp = readPointer(vp)

  if vp == 0 then print("no viewport") error("") end

  local Node = FindNodeWithScriptInstance(vp,StringSearch)

  if stype ~= 0 then Node = FindNodeByScriptType(vp,stype) end

  if Node == 0 then print(szName .. " not found - is a game loaded? if yes try again") error("") end
  local ScriptInstance = readPointer(Node+CONST_SCRIPTINSTANCE)
  local Script = readPointer(ScriptInstance+0x10)

  local ScriptType = executeCodeEx(0,nil,getAddress("GetClassName"),Script)
  if ScriptType == 0 or nil then return end

  local szScriptType = ReadNameString(ScriptType)

  local NodeName = readPointer(Node+CONST_NAMESTRING)
  NodeName = readPointer(NodeName+0x10)
  local szNodeName = readString(NodeName,99,true)

  local Generated = addList.getMemoryRecordByDescription("Generated:")
  local ParentRec = 0
  if Generated == nil then
    ParentRec = addList.createMemoryRecord()
    ParentRec.setDescription("Generated:")
    ParentRec.setAddress(0)
    ParentRec.setType(8)
    ParentRec.DontSave=true
  else
   ParentRec = Generated
  end

  local NameRec = addList.createMemoryRecord()
  NameRec.setDescription(szNodeName)
  NameRec.setAddress(0)
  NameRec.setType(8)
  NameRec.DontSave=true
  NameRec.appendToEntry(ParentRec)

  if (szScriptType == "GDScript") then
   local VectorVariant = readPointer(ScriptInstance+0x38)
   local Size = readInteger(VectorVariant-0x4)

   Transform(Node,NameRec)

   for i=0,(Size-1) do
    local membermap = readPointer(Script+CONST_MEMBERINDICES)
    local endmap = readPointer(Script+CONST_MEMBERINDICES+0x8)
    local VarName = "null"

    membermap = readPointer(membermap+0x10)
    if (readPointer(membermap+0x10) == endmap) then
     VarName = ReadName(membermap,i)
    else
     while (readPointer(membermap+0x10) ~= endmap) do
       membermap = readPointer(membermap+0x10)
     end
     VarName = ReadName(membermap,i)
    end

    local Type = readInteger(VectorVariant)
    local CEType = GetCEType(Type)

    local Ptr = VectorVariant+0x8

    if (Type == 4 ) then -- if string
     Ptr=readPointer(Ptr) --read ptr to wchars
    end

    local bAdd = false
    for i,v in pairs(t) do
      if v == VarName then bAdd = true end
    end

    if bAdd then
      if (Type == 5) then -- if vector2
       MemRec(string.format("[%x] %s Vec2.x", i,VarName),Ptr,CEType,NameRec)
       MemRec(string.format("[%x] %s Vec2.y", i,VarName),Ptr+0x4,CEType,NameRec)
      else
       MemRec(string.format("%s",VarName),Ptr,CEType,NameRec)
      end
    end
    VectorVariant=VectorVariant+0x18
   end

   return

end
--end of "GDSript"

if (szScriptType == "VisualScript") then

  Transform(Node,NameRec)

  local membermap = readPointer(ScriptInstance+0x18)
  local endmap = readPointer(ScriptInstance+0x20)
  local MemberInfos = {}

  membermap = readPointer(membermap+0x10)
  if (readPointer(membermap+0x10) == endmap) then
   ReadNameVariant(membermap,MemberInfos)
  else
   while (readPointer(membermap+0x10) ~= endmap) do
     membermap = readPointer(membermap+0x10)
   end
   ReadNameVariant(membermap,MemberInfos)
  end

   for i,v in pairs(MemberInfos) do
      local CEType = GetCEType(v.Type)
      MemRec(string.format("[%x] %s", i,v.Name),v.Ptr,CEType,NameRec)
    end

end

end
[ENABLE]
CONST_CHILDREN = 0x108
CONST_NAMESTRING = 0x130
CONST_SCRIPTINSTANCE = 0x58
CONST_SCRIPT = 0x250
CONST_MEMBERINDICES = 0x1C0
VIEWPORT = 0
RET_0 = 0x21

local vp = getAddress("pViewport")
vp = readPointer(vp)

if  vp == 0 then print("error : no viewport (focus the game first)") error("no viewport") return end
VIEWPORT = vp

--DebugDumpNodes(vp,true)

[DISABLE]



</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>257229</ID>
              <Description>"God Mode Current Wave"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local ret = FindScript("Player","enable_hurtbox",RET_0)
if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***") error("god mode error") return end

print("done - god mode activated for current wave")
return("assert(true)")
[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257239</ID>
              <Description>"Invulnerable"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local VarName = "invulnerable"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x1)

print("invulnerable acivated!\nnote: it takes effect on next wave")

[DISABLE]

local VarName = "invulnerable"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x0)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257246</ID>
              <Description>"Unlock All Characters"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local VarName = "unlock_all_chars"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x1)

[DISABLE]

local VarName = "unlock_all_chars"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x0)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257241</ID>
              <Description>"Unlock All Difficulties"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local VarName = "unlock_all_difficulties"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x1)

[DISABLE]

local VarName = "unlock_all_difficulties"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x0)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257240</ID>
              <Description>"Unlock All Challenges?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local VarName = "unlock_all_challenges"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x1)

[DISABLE]

local VarName = "unlock_all_challenges"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x0)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257245</ID>
              <Description>"Enable Debug Items?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local VarName = "debug_items_added"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x1)


print("done\nnote: if you return to the main menu the flag will be set to false again!")
return("assert(true)")
[DISABLE]

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257247</ID>
              <Description>"Instant Win Next Wave"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local VarName = "instant_waves"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x1)

[DISABLE]

local VarName = "instant_waves"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

writeBytes(pValue,0x0)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257242</ID>
              <Description>"Add XP"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Add XP:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "current_xp"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 local iCurrentValue = readDouble(pValue)
 iCurrentValue = iCurrentValue + iAmount
 writeDouble(pValue,iCurrentValue)
end

if iVariant == 2 then
 local iCurrentValue = readInteger(pGold)
 iCurrentValue = iCurrentValue + iAmount
 writeInteger(pGold,iCurrentValue)
end

print("done")
return("assert(true)")

[DISABLE]


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257243</ID>
              <Description>"Add Gold"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Add Gold:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "gold"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 local iCurrentValue = readDouble(pValue)
 iCurrentValue = iCurrentValue + iAmount
 writeDouble(pValue,iCurrentValue)
end

if iVariant == 2 then
 local iCurrentValue = readInteger(pValue)
 iCurrentValue = iCurrentValue + iAmount
 writeInteger(pValue,iCurrentValue)
end

print("done")
return("assert(true)")

[DISABLE]


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257244</ID>
              <Description>"Add Bonus Gold"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Add Bonus Gold:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "bonus_gold"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,VarName)
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 local iCurrentValue = readDouble(pValue)
 iCurrentValue = iCurrentValue + iAmount
 writeDouble(pValue,iCurrentValue)
end

if iVariant == 2 then
 local iCurrentValue = readInteger(pValue)
 iCurrentValue = iCurrentValue + iAmount
 writeInteger(pValue,iCurrentValue)
end

print("done")
return("assert(true)")

[DISABLE]


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257441</ID>
              <Description>"Remove Dodge Cap"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local VarName = "dodge_cap"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,100.0)
end

if iVariant == 2 then
 writeInteger(pValue,100)
end

print("done! dodge cap removed, will take effect on next wave!")
return("assert(true)")

[DISABLE]

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257445</ID>
              <Description>"Stats:"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>FF8000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>257459</ID>
                  <Description>"Set Max HP"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Max HP:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_max_hp"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")

[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257442</ID>
                  <Description>"Set Armor"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Armor:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_armor"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257443</ID>
                  <Description>"Set Crit Chance"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Crit-Chance:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_crit_chance"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257444</ID>
                  <Description>"Set Luck"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Luck:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_luck"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257446</ID>
                  <Description>"Set Attack Speed"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Attack-Speed:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_attack_speed"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257447</ID>
                  <Description>"Set HP Reg"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set HP Reg:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_hp_regeneration"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257448</ID>
                  <Description>"Set Lifesteal"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Lifesteal:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_lifesteal"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257450</ID>
                  <Description>"Set Percent Damage"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Percent HP:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_percent_damage"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257458</ID>
                  <Description>"Set Elementar Damage"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Elementar Damage:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_elemental_damage"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257451</ID>
                  <Description>"Set Dodge"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Dodge:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_dodge"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257452</ID>
                  <Description>"Set Engineering"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Engineering:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_engineering"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257453</ID>
                  <Description>"Set Range"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Range:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_range"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257454</ID>
                  <Description>"Set Harvesting"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Harvesting:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_harvesting"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257455</ID>
                  <Description>"Set Speed"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Speed:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_speed"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
 print(iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257449</ID>
                  <Description>"Set Melee Damage"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Melee Damage:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_melee_damage"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )


if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>257456</ID>
                  <Description>"Set Ranged Damage"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]
local szAmount = inputQuery("Set Ranged Damage:","Amount:","")
local iAmount = tonumber(szAmount,10)

local VarName = "stat_ranged_damage"

local pPlayerNode = FindNode(VIEWPORT,"RunData")
if pPlayerNode == 0 then print("error : no RunData") error("rundata") return end

local pValue = GetPointer(pPlayerNode,"effects")
if pValue == 0 then printf("error : %s not found",VarName) error("variable not found") return end

local pDict = readPointer(pValue)
local pItems = readPointer(pDict + 0x8)
local pItem = readPointer(pItems)


local pValue = FindDictValue(pItem,VarName)
local iVariant = readInteger( pValue - 0x8 )

if iVariant == 3 then
 writeDouble(pValue,iAmount)
end

if iVariant == 2 then
 writeInteger(pValue,iAmount)
end

print("done")
return("assert(true)")
[DISABLE]

--local ret = FindScript("Player","enable_hurtbox",0x15)
--if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
